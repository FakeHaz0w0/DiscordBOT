name: Run Discord Bot

on:
  workflow_dispatch:    # allow manual runs
  push:                 # run on any push

jobs:
  run:
    runs-on: ubuntu-latest
    # job-level timeout (adjust if needed; GitHub enforces limits)
    timeout-minutes: 360

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Determine workdir (prefer DiscordBOT/Hazsbot)
        id: find-workdir
        run: |
          # Candidates checked in order
          CANDIDATES=("DiscordBOT/Hazsbot" "Hazsbot" "DiscordBOT" ".")
          FOUND=""
          for d in "${CANDIDATES[@]}"; do
            if [ -f "$d/main.py" ]; then
              FOUND="$d"
              break
            fi
          done
          # if none had main.py, prefer the directory that exists
          if [ -z "$FOUND" ]; then
            for d in "${CANDIDATES[@]}"; do
              if [ -d "$d" ]; then
                FOUND="$d"
                break
              fi
            done
          fi
          # final fallback to repo root
          if [ -z "$FOUND" ]; then
            FOUND="."
          fi
          echo "WORKDIR=$FOUND" >> $GITHUB_ENV
          echo "Selected workdir: $FOUND"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('DiscordBOT/Hazsbot/requirements.txt', 'Hazsbot/requirements.txt', 'requirements.txt') }}

      - name: Install dependencies (if requirements.txt exists in workdir)
        run: |
          if [ -f "${WORKDIR}/requirements.txt" ]; then
            python -m pip install --upgrade pip
            python -m pip install -r "${WORKDIR}/requirements.txt"
          else
            echo "No requirements.txt in ${WORKDIR} â€” skipping dependency install"
          fi

      - name: Show selected workdir & quick runtime checks
        run: |
          echo "Working directory: ${WORKDIR}"
          pwd
          ls -la "${WORKDIR}"
          python -c "import importlib.util, sys; print('Python', sys.version.split()[0]); print('discord installed:', importlib.util.find_spec('discord') is not None)"

      - name: Run bot (from selected workdir)
        working-directory: ${{ env.WORKDIR }}
        env:
          # map a variety of secret names you might've used (none of these get printed)
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORDBOTTOKEN: ${{ secrets.DISCORDBOTTOKEN }}
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DISCORDTOKEN: ${{ secrets.DISCORDTOKEN }}
          TOKEN: ${{ secrets.TOKEN }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          echo "Starting Hazsbot from ${WORKDIR}..."
          # safe presence check (DOES NOT print any secret value)
          if [ -n "$DISCORD_BOT_TOKEN" ]; then echo "DISCORD_BOT_TOKEN present: true"; else echo "DISCORD_BOT_TOKEN present: false"; fi
          if [ -n "$DISCORDBOTTOKEN" ]; then echo "DISCORDBOTTOKEN present: true"; else echo "DISCORDBOTTOKEN present: false"; fi
          if [ -n "$DISCORD_TOKEN" ]; then echo "DISCORD_TOKEN present: true"; else echo "DISCORD_TOKEN present: false"; fi
          echo "Launching bot..."
          # run the entrypoint found in the working directory
          python main.py
